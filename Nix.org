#+title: Nix Configuration

I'm making another attempt at learning Nix, as it seems incredibly
useful for managing my environment for different projects.

I'm using [[https://blog.sulami.xyz/posts/nix-for-developers/][Robin Schroer's blog post]] and [[https://ianthehenry.com/posts/how-to-learn-nix/][Ian Henry's stream of
conciousness]] as my guides. I'll probably check out the manual too, one
day.

* System configuration

These are the packages I want available in my environment without
having to call =nix-shell= in a project. After changing this file I
need to run =darwin-rebuild switch=.

#+begin_src nix :tangle ~/.nixpkgs/darwin-configuration.nix :mkdirp t
{ config, pkgs, ... }:

{
  # List packages installed in system profile. To search by name, run:
  # $ nix-env -qaP | grep wget
  environment.systemPackages =
    [
      pkgs.aspell
      pkgs.clj-kondo
      pkgs.clojure
      pkgs.curl
      pkgs.direnv
      pkgs.emacs
      pkgs.git
      pkgs.gnupg
      pkgs.isync
      pkgs.jetbrains-mono
      pkgs.jq
      pkgs.leiningen
      pkgs.msmtp
      pkgs.mtr
      pkgs.nix-direnv
      pkgs.notmuch
      pkgs.pinentry
      pkgs.plantuml
      pkgs.postgresql
      pkgs.restic
      pkgs.ripgrep
      pkgs.texlive.combined.scheme-full
    ];
  # Use a custom configuration.nix location.
  # $ darwin-rebuild switch -I darwin-config=$HOME/.config/nixpkgs/darwin/configuration.nix
  # environment.darwinConfig = "$HOME/.config/nixpkgs/darwin/configuration.nix";

  # Auto upgrade nix package and the daemon service.
  # services.nix-daemon.enable = true;
  # nix.package = pkgs.nix;

  fonts.enableFontDir = true;
  fonts.fonts = with pkgs; [
    jetbrains-mono
    dejavu_fonts
    noto-fonts
    hack-font
  ];

  launchd.user.agents.mbsync = {
    path                            = [ pkgs.isync ];
    environment                     = {
      NIX_SSL_CERT_FILE = "/etc/ssl/certs/ca-certificates.crt";
    };
    command                         = "mbsync -aqV";
    serviceConfig.RunAtLoad         = true;
    serviceConfig.StartInterval     = 3600;
    serviceConfig.StandardErrorPath = "/Users/stig/Library/Logs/mbsync/stderr.log";
    serviceConfig.StandardOutPath   = "/Users/stig/Library/Logs/mbsync/stdout.log";
  };

  # This is for direnv, to dial back garbage collection
  nix.extraOptions = ''
    keep-outputs = true
    keep-derivations = true
  '';

  environment.pathsToLink = [
    "/share/nix-direnv"
  ];

  # Create /etc/bashrc that loads the nix-darwin environment.
  programs.zsh.enable = true;  # default shell on catalina
  # programs.fish.enable = true;

  # Used for backwards compatibility, please read the changelog before changing.
  # $ darwin-rebuild changelog
  system.stateVersion = 4;
}
#+end_src

This makes direnv do nixy things, I think?

#+begin_src sh :tangle ~/.direnvrc
source /run/current-system/sw/share/nix-direnv/direnvrc
#+end_src
