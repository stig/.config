#+TITLE: My Git Setup
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:sh         :tangle yes
#+PROPERTY: header-args            :results silent
#+STARTUP: content

* Basic Setup

  I use [[http://magit.vc][Magit]] all day. If you use git a lot it's possibly worth switching to
  Emacs just for it. It is excellent. I bind =H-m= to =magit-status=, which is
  the main entry point for the mode.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :pin melpa-stable
      :ensure t

      :bind (("M-m" . magit-status)
             ("s-b" . magit-blame))

      :init
      (setq magit-completing-read-function #'ivy-completing-read)
      (setq magit-git-executable "/usr/bin/git"
            magit-diff-refine-hunk 'all
            magit-push-always-verify nil))
  #+END_SRC

* GitHub setup

  I also use a Magit plugin that interacts with GitHub, allowing me to create
  pull-requests without leaving Magit.

  #+BEGIN_SRC emacs-lisp
    (use-package magit-gh-pulls
      :ensure t
      :init
      (setq magit-gh-pulls-mode-lighter "")
      :config
      (load-file "~/.emacs.d/elpa/marshal-0.8.2/marshal.el")
      (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
  #+END_SRC

  Link to file location on github.

  #+BEGIN_SRC emacs-lisp
    (use-package git-link
      :pin melpa-stable
      :ensure t
      :bind ("C-c g l" . git-link))
  #+END_SRC

* Resolving Conflicts

  Sometimes I have to resolve conflicts. I then use Ediff, which I
  launch from Magit. Occasionally I want to pick *both* sides of the
  conflicts. (If both branches add an entry to a list, for example;
  which can often happen in hieradata / puppet.) This adds =d= as a
  shortcut to do that. ([[http://stackoverflow.com/a/29757750/5950][Credits]].) You can use =~= to swap the A and B
  buffers, so in effect you can get A then B, /or/ B then A.

  #+BEGIN_SRC emacs-lisp
    (defun ediff-copy-both-to-C ()
      (interactive)
      (ediff-copy-diff ediff-current-difference nil 'C nil
                       (concat
                        (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                        (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
    (defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
    (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)
  #+END_SRC

* Auto commit

  In some projects (notably, my Org/Agenda setup) I want to
  automatically commit when editing files.

  #+BEGIN_SRC emacs-lisp
    (use-package git-auto-commit-mode
      :ensure t
      :init
      (setq gac-shell-and "; and "))
  #+END_SRC
