#+TITLE: Completion Setup
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:emacs-lisp :tangle Completion.el
#+PROPERTY: header-args:sh         :tangle Completion.sh
#+PROPERTY: header-args            :results silent

* Introduction

In the past I've been using Helm, but I did a recent experiment with
Ivy because I'm a perpetual tinkerer. It doesn't do everything that
Helm does, and it was annoying in some respects (notably not allowing
me to create new files in the minibuffer, not allowing /closing buffers/
in the minibuffer, and not allowing editable results in ag buffer) but
I'm a bit confused by helm in some situations and checking to see if
Ivy suits those better.

* Helm

  I use [[https://github.com/emacs-helm/helm][Helm]] for interactive completion and finding things,
  particularly files.

  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :init

      ;; Ag buffer names are insanely long...
      (setq helm-buffer-max-length 35)

      :bind (("M-x" . helm-M-x)
	     ("M-y" . helm-show-kill-ring)
	     ("C-x b" . helm-mini)
	     ("C-x C-b" . helm-buffers-list)
	     ("C-x 4 b" . helm-mini)
	     ("C-x C-f" . helm-find-files))

      :config
      (require 'helm-buffers)
      ;; Magit creates many buffers, most of which are not interesting.
      (add-to-list 'helm-boring-buffer-regexp-list "\\*magit")

      ;; TAGS files are rarely interesting.
      (add-to-list 'helm-boring-buffer-regexp-list "TAGS"))
  #+END_SRC

** Ivy

Let's ease into Ivy by just making sure it's installed and enabling it
everywhere for completion. I'm starting by cherry-picking from [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/][Sam
Barreto's blog post]] on switching from Helm to Ivy.

#+BEGIN_SRC emacs-lisp-disabled
  (use-package ivy
    :ensure t
    :bind (:map ivy-mode-map ("C-'" . ivy-avy))
    :config
    (ivy-mode 1)

    ;; Add recent files and bookmarks to ivy-switch-buffer
    (setq ivy-use-virtual-buffers t))
#+END_SRC

** Swiper

   Invoke swiper (find in current buffer).

   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :bind (("C-x /" . swiper)))
   #+END_SRC

