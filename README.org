#+TITLE: My Emacs Setup
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:sh         :tangle yes
#+PROPERTY: header-args            :results silent
#+STARTUP: content
* Introduction

  This is my Emacs configuration. Because I'm prone to forget what does what,
  my configuration is in the form of a [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][literate programming]] document: prose,
  interspaced with code.

  After over a decade with BBEdit I started looking at Emacs again
  when I started learning Clojure. I started with the "better
  defaults" package and added things one-by-one as I found them,
  rather than stealing someone else's mammoth =.emacs= file that I
  didn't understand any of. Initially I drew a lot of inspiration from
  [[https://github.com/magnars/.emacs.d][magnars' .emacs.d]], but after rewriting it using [[https://github.com/jwiegley/use-package][use-package]] (which
  is great) and later using Org mode, it now feels like my own work.

  When I say this document uses literate programming, I mean that the
  configuration snippets here are not copied-and-pasted from my config, they
  /are/ my config. I use a tiny "bootloader", found in [[file:init.el][init.el]], that reads
  this file and parses out all the configuration snippets.

  However, this document doesn't just contain =emacs-lisp= snippets. It also
  contains some shell snippets to install Emacs itself, and some helper
  programs. By invoking =C-c C-v t= on this document a =README.sh= file is
  produced, that contains shell commands that will install all the helper
  programs via /brew/. (Yes, there's a small bootstrapping problem here. But
  recent Emacs distributions ships with the required Org mode support for
  most of this, so it's not really a problem.)

* Install Emacs

  I'm currently running a [[https://emacsformacosx.com/emacs-builds/Emacs-2016-06-28_01-41-49-cfb3c61f1ffec9a6322407fdd228d5cc31c31ed0-universal.dmg][Emacs 25 nightly build]].

  #+BEGIN_SRC sh
      cat <<EOF > /tmp/emacs
    cask 'emacs' do
      version '25.1'
      sha256 '5bd04c82d2a091a48d7b9b80a26fa31f64767f2e553440a556d12be5815e29ef'

      app 'Emacs.app'
      binary "#{appdir}/Emacs.app/Contents/MacOS/bin/emacsclient"
      binary "#{appdir}/Emacs.app/Contents/MacOS/bin/ctags"
      binary "#{appdir}/Emacs.app/Contents/MacOS/bin/ebrowse"
      binary "#{appdir}/Emacs.app/Contents/MacOS/bin/etags"
    end
EOF

  brew cask install --force file:///tmp/emacs
  #+END_SRC

* Symlink =~/.emacs.d= to this directory

  I create a symlink from =~/.emacs.d= to the directory containing this file.
  (Checking out this repo is the topic [[file:~/Dotfiles/README.org][covered here]].) If =~/.emacs.d= is
  already a symbolic link, this will delete it first. If it is a directory,
  move that out of the way.

  #+BEGIN_SRC sh
    test -L ~/.emacs.d && rm ~/.emacs.d
    test -d ~/.emacs.d && mv ~/.emacs.d ~/.emacs.d.$(date +%s)
    ln -s ~/Dotfiles/emacs.d ~/.emacs.d
  #+END_SRC

* Configuration

  Alright! Now on to the actual configuration.

** I like big fonts and I cannot lie

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140)
#+END_SRC
** Add =/usr/local/bin= to our path

   The GUI Emacs gets exec path from the system, rather than the login shell.
   This requires us to add "/usr/local/bin" to exec-path lest it can't find
   any programs installed by =brew=. I used to use
   =exec-path-from-shell=, but after upgrading either some Emacs
   packages or Fish itself it broke and I wasn't able to fix it. So
   for now, just configure it manually.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC

** Don't hide Emacs when  ⌘-h is pressed

   In Emacs Mac Port, ⌘-h bypasses any Emacs keybindings and instead sends a
   "pass command to system" message to Mac OSX, which then hides the entire
   application. [[https://github.com/railwaycat/homebrew-emacsmacport/issues/55][I don't want that]].

   #+BEGIN_SRC emacs-lisp
     (setq mac-pass-command-to-system nil)
   #+END_SRC

** Disable mouse interface, splash screen & beeps

   I don't tend to use a mouse in Emacs very often, so I turn off mouse
   interface early to avoid momentary display during launch.

   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   #+END_SRC

   I also don't need to see a splash screen on every launch.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC

   I do not like Emacs to beep at me; I prefer a visual bell.

   #+BEGIN_SRC emacs-lisp
     (setq visible-bell t)
   #+END_SRC

** Make mouse scrolling smoother

   The adaptive mouse scrolling is far, far too quick so let's turn that off.

   #+BEGIN_SRC emacs-lisp
   (setq mouse-wheel-progressive-speed nil)
   (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control))))
   #+END_SRC

** Support for fullscreen

   I like to run apps in fullscreen mode. Unfortunately emerge, when running
   an Emacs version without Yamamoto's Mac patch set, doesn't really work in
   fullscreen---it ends up putting the small emerge control frame on a
   different screen. Because I like Emacs 25 (for up-to-date Gnus) I work
   around this problem by exiting fullscreen and just maximising the frame
   instead.

   Toggling frame maximation is already available as =M-<f10>=, so all we need
   to do is add a key binding to toggle fullscreen. I found this function at
   the [[https://www.emacswiki.org/emacs/FullScreen#toc26][EmacsWiki Fullscreen page]], and it does just that.

   #+BEGIN_SRC emacs-lisp
     (defun my-toggle-fullscreen ()
       "Toggle full screen"
       (interactive)
       (set-frame-parameter
        nil 'fullscreen
        (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))

     (global-set-key (kbd "M-<f11>") 'my-toggle-fullscreen)
   #+END_SRC

   Sometimes (when using ediff) I don't use fullscreen. By resizing the window
   by pixels rather than characters we can still fill the entire screen.

   #+BEGIN_SRC emacs-lisp
     (setq frame-resize-pixelwise t)
   #+END_SRC

** Disable kill-emacs

   Disable =s-q= (=kill-emacs=) as it is too close to =M-q= which I use for
   reflowing text.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "s-q") nil)
   #+END_SRC

** Put Custom settings in a separate file

   I prefer to code my configuration, but sometimes Custom settings are good
   enough. I prefer that such settings live in a separate file though. Load
   that file if it exists.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (if (file-exists-p custom-file)
         (load custom-file))
   #+END_SRC

** Start the Emacs Daemon

   We want Emacs to be running its server so we can interact with it using =emacsclient=.

  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC

** End all files in a newline

   All files should end in a newline. Insert one if there isn't one already.

   #+BEGIN_SRC emacs-lisp
     (setq require-final-newline t)
   #+END_SRC

** Highlight & deal with whitespace annoyances

   This highlights certain whitespace annoyances, and adds a key binding to
   clean it up.

   #+BEGIN_SRC emacs-lisp
     (require 'whitespace)
     (setq whitespace-style '(face empty tabs trailing))
     (global-whitespace-mode t)

     (global-set-key (kbd "s-w") 'whitespace-cleanup)
   #+END_SRC

** Set up modifier keys on OS X

   Set up the modifier keys the way that best fits my keyboard.

   #+BEGIN_SRC emacs-lisp
     (setq mac-command-modifier 'meta
           mac-option-modifier 'super
           mac-control-modifier 'control
           ns-function-modifier 'hyper)
   #+END_SRC

** Auto revert mode

   When files change on disk, revert the buffer automatically.

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode 1)
   #+END_SRC

** Don't store backup files next to originals

   I don't like backup files (those dreaded =foo~= ones) all over my disk.
   This places them in =~/.emacs.d/backups=.

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
   #+END_SRC

** Transparently open compressed files

   I *do* like it when Emacs transparently opens compressed files. It gives
   me the warm fuzzies.

   #+BEGIN_SRC emacs-lisp
     (auto-compression-mode t)
   #+END_SRC

** Make 'y' and 'n' satisfy prompts

   Answering just 'y' or 'n' will do, rather than having to spell out "yes"
   or "no".

   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Toggle Window Split function

   Sometimes a window is split horizontally, and you would prefer
   vertically. Or vice versa. This function can help! Just don't ask me how
   it works: I found it on StackOverflow. (I think. Again.)

   #+BEGIN_SRC emacs-lisp
     (defun toggle-window-split ()
       (interactive)
       (if (= (count-windows) 2)
           (let* ((this-win-buffer (window-buffer))
                  (next-win-buffer (window-buffer (next-window)))
                  (this-win-edges (window-edges (selected-window)))
                  (next-win-edges (window-edges (next-window)))
                  (this-win-2nd (not (and (<= (car this-win-edges)
                                              (car next-win-edges))
                                          (<= (cadr this-win-edges)
                                              (cadr next-win-edges)))))
                  (splitter
                   (if (= (car this-win-edges)
                          (car (window-edges (next-window))))
                       'split-window-horizontally
                     'split-window-vertically)))
             (delete-other-windows)
             (let ((first-win (selected-window)))
               (funcall splitter)
               (if this-win-2nd (other-window 1))
               (set-window-buffer (selected-window) this-win-buffer)
               (set-window-buffer (next-window) next-win-buffer)
               (select-window first-win)
               (if this-win-2nd (other-window 1))))))

     (define-key ctl-x-4-map "t" 'toggle-window-split)
   #+END_SRC

** Delete the file for the current buffer function

   "Delete this file." Simple, huh?

   #+BEGIN_SRC emacs-lisp
     (defun delete-current-buffer-file ()
       "Removes file connected to current buffer and kills buffer."
       (interactive)
       (let ((filename (buffer-file-name))
             (buffer (current-buffer))
             (name (buffer-name)))
         (if (not (and filename (file-exists-p filename)))
             (ido-kill-buffer)
           (when (yes-or-no-p "Are you sure you want to remove this file? ")
             (delete-file filename)
             (kill-buffer buffer)
             (message "File '%s' successfully removed" filename)))))

     (global-set-key (kbd "C-x C-k") 'delete-current-buffer-file)
   #+END_SRC

** Eshell

   I have started using /Eshell/. It is close to magic. There's not a lot of
   setup (it has its own [[file:eshell/alias][alias file]]), but I've got a keybinding to bring up
   eshell quickly. This launches eshell if it is not already running, or
   switches to it if it is.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c s") 'eshell)
   #+END_SRC

   Eshell is great, and its Tramp integration allows me to open remote files
   in local Emacs seamlessly with the =find-file= command. (Which I have
   aliased to =ff=.) Eshell also makes sure that my shell behaves the same,
   and has the same config, whether I am on a local machine or a remote one.

** Tramp

   Allow using sudo over ssh, so we can sudo to root remotely on a machine
   that does not allow root login.

   #+BEGIN_SRC emacs-lisp
     (set-default 'tramp-default-proxies-alist
                  (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
   #+END_SRC

   For opening files using sudo locally, don't connect via SSH. (My local
   machine doesn't accept SSH connections.)

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'tramp-default-proxies-alist
                  '((regexp-quote (system-name)) nil nil))
   #+END_SRC

   If I don't set this then tramp will attempt to use OS X's tempfile
   directory on a remote machine, which does not work. I don't understand
   why it won't use the remote machine's temp directory automatically, but
   there you go.

   #+BEGIN_SRC emacs-lisp
     (setq temporary-file-directory "/tmp/")
   #+END_SRC

   Apparently using =ssh= is faster than the default =scp= mode, so let's use
   that.

   #+BEGIN_SRC emacs-lisp
   (setq tramp-default-method "ssh")
   #+END_SRC

   This function lets me re-open the currently open file using sudo[fn:1].
   I've bound it to =C-c C-s=. It works for both local and remote buffers.

   #+BEGIN_SRC emacs-lisp
     (defun sudo-edit-current-file ()
       (interactive)
       (let ((position (point)))
         (find-alternate-file
          (if (file-remote-p (buffer-file-name))
              (let ((vec (tramp-dissect-file-name (buffer-file-name))))
                (tramp-make-tramp-file-name
                 "sudo"
                 (tramp-file-name-user vec)
                 (tramp-file-name-host vec)
                 (tramp-file-name-localname vec)))
            (concat "/sudo:root@localhost:" (buffer-file-name))))
         (goto-char position)))
   #+END_SRC

   The man pages on my OS X local machine are very oqften different from the
   remote machines I'm logged in to. Thus, when in eshell, in a /remote/ path,
   I would like to display /remote/ man pages from that system. I'm not sure
   the regular man command can do that, but /woman/ can, with a bit of help.

   I've not /completely/ nailed this, so the useability is a bit rough. But
   with the below command in eshell you can do:

   #+BEGIN_EXAMPLE
   alias man 'tramp-aware-woman ${*man -c --path $1}'
   #+END_EXAMPLE

   Now you have an alias which will open a woman buffer with the /remote/ man
   page of the man page you want.

   #+BEGIN_SRC emacs-lisp
     (defun tramp-aware-woman (man-page-path)
       (interactive)
       (let ((dir (eshell/pwd)))
         (woman-find-file
          (if (file-remote-p dir)
              (let ((vec (tramp-dissect-file-name dir)))
                (tramp-make-tramp-file-name
                 (tramp-file-name-method vec)
                 (tramp-file-name-user vec)
                 (tramp-file-name-host vec)
                 man-page-path))
            man-page-path))))
   #+END_SRC

** Set up Clipboard

   These settings improve pasting behaviour with programs outside Emacs.

   Save clipboard strings into the kill ring before replacing them. This is
   useful if you select something in Emacs, then select something from
   _another_ program. If you don't set this to non-nil the previous selection
   done from within Emacs is gone. This preserves it in the kill ring,
   enabling you to retrieve it.

   #+BEGIN_SRC emacs-lisp
     (setq save-interprogram-paste-before-kill t)
   #+END_SRC

   Copying ("yanking") with the mouse copies at point, rather than where you
   click.

   #+BEGIN_SRC emacs-lisp
     (setq mouse-yank-at-point t)
   #+END_SRC

** Show more "recent files" in =M-x b= window

   Keep up to 100 recent files, rather than the default of 20.

   #+BEGIN_SRC emacs-lisp
    (setq recentf-max-saved-items 100)
   #+END_SRC

** Save my place in each file

   It's nice if Emacs knows where I was last time I opened a file.

   #+BEGIN_SRC emacs-lisp
     (setq-default save-place t)
     (setq save-place-file (concat user-emacs-directory "places"))
   #+END_SRC

** Save minibuffer history

   This allows us to "tap up" in the minibuffer to recall previous items,
   even from a previous session.

   #+BEGIN_SRC emacs-lisp
     (savehist-mode 1)
   #+END_SRC

** Show Matching parens

   This is extremely useful. Put the mark on a paren (any of =()[]{}=,
   actually) and Emacs shows the matching closing/opening one.

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC

** Add keybinding to join next line to this

   With cursor at any point in a line, hit =M-j= to move to the end, and
   delete the newline. The cursor is left where the newline used to be.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-j")
                     (lambda ()
                       (interactive)
                       (join-line -1)))
   #+END_SRC

** Buffer-local regex search

   I like the =C-s= and =C-r= keybindings to mean "search forward/backward
   for this regex".

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-s") 'isearch-forward-regexp)
     (global-set-key (kbd "C-r") 'isearch-backward-regexp)
   #+END_SRC

** Running tests

   Add a convenient keybinding for running tests interactively.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x t") 'ert)
   #+END_SRC

** IRC

   But /of course/ Emacs has a built-in IRC client. In fact it has two! But I
   digress. Let's use the oldest one, and configure it slightly.

   #+BEGIN_SRC emacs-lisp
   (setq rcirc-default-nick "stigbra")
   (setq rcirc-default-full-name "Stig Brautaset")
   #+END_SRC

** SmartParens

   I use smartparens rather that paredit. I cannot remember why; probably
   something to do with it being better supported for Cider/Clojure? Anyway,
   here's my SmartParens config. It is  mostly cribbed from the author, with
   small changes to make suitable for plugging into =use-package=.

   One notable thing: I remove "'" from being a pair, because that character
   is used for quoting in lisps, and for apostrophe in text modes. Having two
   inserted every time you hit the key is very annoying.

   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
     :ensure t

     :config
     (smartparens-global-mode t)
     (show-smartparens-global-mode t)
     (sp-pair "'" nil :actions :rem)

     ;; Add smartparens-strict-mode to all sp--lisp-modes hooks. C-h v sp--lisp-modes
     ;; to customize/view this list.
     (mapc (lambda (mode)
             (add-hook (intern (format "%s-hook" (symbol-name mode))) 'smartparens-strict-mode))
           sp--lisp-modes)

     ;; Conveniently set keys into the sp-keymap, limiting the keybinding to buffers
     ;; with SP mode activated
     (mapc (lambda (info)
             (let ((key (kbd (car info)))
                   (function (car (cdr info))))
               (define-key sp-keymap key function)))
           '(("C-M-f" sp-forward-sexp)
             ("C-M-b" sp-backward-sexp)

             ("C-M-d" sp-down-sexp)
             ("C-M-a" sp-backward-down-sexp)
             ("C-S-a" sp-beginning-of-sexp)
             ("C-S-d" sp-end-of-sexp)

             ("C-M-e" sp-up-sexp)

             ("C-M-u" sp-backward-up-sexp)
             ("C-M-t" sp-transpose-sexp)

             ("C-M-n" sp-next-sexp)
             ("C-M-p" sp-previous-sexp)

             ("C-M-k" sp-kill-sexp)
             ("C-M-w" sp-copy-sexp)

             ("C-M-<delete>" sp-unwrap-sexp)
             ("C-M-<backspace>" sp-backward-unwrap-sexp)

             ("C-<right>" sp-forward-slurp-sexp)
             ("C-<left>" sp-forward-barf-sexp)
             ("C-M-<left>" sp-backward-slurp-sexp)
             ("C-M-<right>" sp-backward-barf-sexp)

             ("M-D" sp-splice-sexp)
             ("C-M-<delete>" sp-splice-sexp-killing-forward)
             ("C-M-<backspace>" sp-splice-sexp-killing-backward)
             ("C-S-<backspace>" sp-splice-sexp-killing-around)

             ("C-]" sp-select-next-thing-exchange)
             ("C-<left_bracket>" sp-select-previous-thing)
             ("C-M-]" sp-select-next-thing)

             ("M-F" sp-forward-symbol)
             ("M-B" sp-backward-symbol)

             ("H-t" sp-prefix-tag-object)
             ("H-p" sp-prefix-pair-object)
             ("H-s c" sp-convolute-sexp)
             ("H-s a" sp-absorb-sexp)
             ("H-s e" sp-emit-sexp)
             ("H-s p" sp-add-to-previous-sexp)
             ("H-s n" sp-add-to-next-sexp)
             ("H-s j" sp-join-sexp)
             ("H-s s" sp-split-sexp)))

     ;; In Lisp modes, let ')' go to end of sexp
     (bind-key ")" 'sp-up-sexp emacs-lisp-mode-map)
     (bind-key ")" 'sp-up-sexp lisp-mode-map))
   #+END_SRC

** Aggressive Indent

   I like to keep my code indented properly at all times. Aggressive-indent
   helps ensure this. Turn it on for lisp modes.

   #+BEGIN_SRC emacs-lisp
     (use-package aggressive-indent
       :ensure t

       :config
       (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
       (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
       (add-hook 'css-mode-hook #'aggressive-indent-mode))
   #+END_SRC

** Autocomplete

   I use auto-complete. I am not entirely sure to what extent, but this is my
   config for it.

   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :config
       (ac-config-default)
       (global-auto-complete-mode))
   #+END_SRC

** Editorconfig

   Some projects I touch, particularly at work, use [[http://editorconfig.org][editorconfig]] to set up
   their indentation and file format preferences.

   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :init
       (setq editorconfig-exclude-modes '(org-mode))
       (setq editorconfig-mode-lighter " EC")
       :config
       (editorconfig-mode))
   #+END_SRC

   Emacs requires an external tool for this to work. I install that using
   brew.

   #+BEGIN_SRC sh
     brew install editorconfig
   #+END_SRC

** Ag / The Silver Searcher

   I use =ag= for searching quite a lot in Emacs.
   This requires an additional external tool for best performance:

   #+BEGIN_SRC sh
     brew install the_silver_searcher
   #+END_SRC

   Then make sure the Emacs ag package is installed.

   #+BEGIN_SRC emacs-lisp
     (use-package ag :ensure t)
   #+END_SRC

   "Writable grep" mode for ag is pretty close to magic. When in a buffer
   showing ag results, try hitting =C-c C-p=--this lets you _edit the results
   of the search, right from the ag results buffer!_ Just hit =C-x C-s= to
   save the results.

   If you hit =C-c C-p= while already in writable grep mode you can delete the
   entire matched line from the file where it was found by hitting =C-c C-d=
   on it. I use this _a lot_ when cleaning up Hieradata.

   Recently ag broke wgrep-ag by starting to group its output. The grouping is
   quite nice, but I prefer working wgrep so I turn the grouping off.

   #+BEGIN_SRC emacs-lisp
     (use-package wgrep-ag
       :ensure t
       :init
       (setq ag-group-matches t))
   #+END_SRC

** Projectile

   I use Projectile to navigate my projects. Some of the things I like about
   it are that it provides the following key bindings:

   - =C-c p t= :: This switches from an implementation file to its test file,
                  or vice versa. I use this extensively in Clojure mode. It
                  might not make sense for all languages; YMMV.
   - =C-c p 4 t= :: The same, as above, but open the file in "other" buffer.
   - =C-c p s s= :: Ag search for something in this project. If point is at a
                    token, default to searching for that. (Mnemonic:
                    "Projectile Silver Searcher".)

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :init
       (setq projectile-mode-line
	     '(:eval (format " Proj[%s]"
			     (projectile-project-name))))
       :config
       (projectile-mode))
   #+END_SRC

** Helm Projectile

   This next package adds =C-c p h=, which invokes =helm-find-file= in project
   context. Invaluable.

   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :ensure t
       :config
       (helm-projectile-on))
   #+END_SRC

** Flycheck

   Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs,
   intended as replacement for the older Flymake extension which is part of
   GNU Emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (flycheck-mode))
   #+END_SRC

** Multiple Cursors

   This package is another one of those near-magical ones. It allows me to do
   multiple edits in the same buffer, using several cursors. You can think of
   it as an interactive macro, where you can constantly see what's being done.

   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t

       :bind (("C-c M-e" . mc/edit-lines)
              ("C-c M-a" . mc/mark-all-dwim)
              ("s-n" . mc/mark-next-like-this)
              ("s-p" . mc/mark-previous-like-this)))
   #+END_SRC

** AppleScript support

   #+BEGIN_SRC emacs-lisp
     (use-package apples-mode
       :ensure t)
   #+END_SRC

** Gists

   Viewing & editing gists in Emacs? Sure! I want that!

   #+BEGIN_SRC emacs-lisp
     (use-package gist
       :ensure t
       :bind (("C-x g l" . gist-list)
              ("C-x g c" . gist-region-or-buffer-private))
       :init

       ;; The defaults for these are too small for gists
       (setq max-specpdl-size 3000)
       (setq max-lisp-eval-depth 2000)

       (setq gist-ask-for-description t))
   #+END_SRC

** Python development

   Python environment

   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package auto-virtualenv
       :ensure t
       :config
       (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
       (add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv))
   #+END_SRC

** Sphinx & reStructuredText

   I like to build Sphinx docs locally to check I've got the right syntax, and
   that links are accounted for. I use sphinx-fronted for that:

   #+BEGIN_SRC emacs-lisp
   (use-package sphinx-frontend
     :ensure t)
   #+END_SRC

   That does require installing python, as OS X's default install doesn't come
   with pip:

   #+BEGIN_SRC sh
     brew install python
   #+END_SRC

   Then, we need to install sphinx itself:

   #+BEGIN_SRC sh
     pip install sphinx
   #+END_SRC

   While we're at it, turn on auto-complete for reStructuredText.

   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete-rst
       :ensure t
       :mode "\\.rst\'"
       :config
       (auto-complete-rst-init)
       (setq auto-complete-rst-other-sources
             '(ac-source-filename
               ac-source-abbrev
               ac-source-dictionary
               ac-source-yasnippet)))
   #+END_SRC

** Graphviz

   I sometimes use Graphviz to create diagrams. I have to actually install the
   graphviz program separately using brew.

   #+BEGIN_SRC sh
   brew cask install graphviz
   #+END_SRC

   I also have to tell Emacs how to launch GraphViz.

   #+BEGIN_SRC emacs-lisp
     (use-package graphviz-dot-mode
       :ensure t
       :init
       (setq default-tab-width 8)
       (setq graphviz-dot-view-command "open -a Graphviz %s"))
   #+END_SRC

** Fish

   Add a mode for editing [[http://fishshell.com][FISH]] shell files.

   #+BEGIN_SRC emacs-lisp
     (use-package fish-mode
       :ensure t)
   #+END_SRC

** Trash

   This allows moving files to trash rather than deleting them from =dired=.
   Delete files by moving them to Trash. This way they _can_ be retrieved
   again.

   #+BEGIN_SRC emacs-lisp
     (use-package osx-trash
       :ensure t
       :init
       (setq delete-by-moving-to-trash t)
       :config
       (osx-trash-setup))
   #+END_SRC

   To support that we need to install a supporting program.

   #+BEGIN_SRC sh
    brew install trash
   #+END_SRC

** Plant UML Mode

   I use this for [[http://plantuml.com/sequence.html][sequence diagrams]] etc.

   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :ensure t
       :mode "\\.puml\\'"
       :init
       (setq puml-plantuml-jar-path
	     (-last-item (directory-files "/usr/local/opt/plantuml/libexec" t))))
   #+END_SRC

   This requires installing plantuml using brew.

   #+BEGIN_SRC sh
     brew install plantuml
   #+END_SRC

** YAS

   YAS is a templating package. You can define mode-specific or global
   templates, and insert templates with keycombinations or triggered based on
   trigger words in the text.

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (yas-global-mode))
   #+END_SRC

** Visual line mode / word wrapping

   #+BEGIN_SRC emacs-lisp
   (add-hook 'text-mode-hook 'visual-line-mode)
   #+END_SRC

** Markdown

   I'm a sucker for lists, and I want to be able to reorder list items
   easily and have them renumbered automatically.

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :pin melpa-stable
       :ensure t
       :bind (("M-<up>" . markdown-move-list-item-up)
	      ("M-<down>" . markdown-move-list-item-down)))
   #+END_SRC
* Footnotes

[fn:1] Found at http://www.emacswiki.org/emacs/TrampMode#toc31
