#+title: Email Setup
#+author: Stig Brautaset
#+PROPERTY: header-args:              :mkdirp yes
#+PROPERTY: header-args:emacs-lisp    :tangle ~/.emacs.d/email.el :results silent
#+STARTUP: content

I like to use Emacs for /all/ writing, including email.  I don't want a
separate program to read and write emails, so it follows I must /read/
email in Emacs too.  I currently use [[https://notmuchmail.org][Notmuch]] for this.

* Notmuch Setup

  Notmuch works pretty well for me out of the box. Mainly I set up a
  keybinding to quickly bring it up.  Its threading and MIME handling
  appears a lot better than mu4e, from a cursory glance.

  Notmuch's Emacs bindings are closely tied to the binary programs, so
  they (strongly) recommend that you don't install Notmuch from ELPA.
  I use [[http://msmtp.sourceforge.net/][msmtp]] for sending email, and [[http://isync.sourceforge.net][mbsync]] for syncing IMAP messages
  between my local machine and upstream servers.

  I configure Notmuch to save a copy of outgoing mail into my sent
  mail folder.

  #+BEGIN_SRC emacs-lisp
    (use-package notmuch
      :load-path "/usr/local/opt/notmuch/share/emacs/site-lisp/notmuch/"
      :ensure nil
      :ensure-system-package (notmuch msmtp (mbsync . isync))
      :hook
      (notmuch-message-mode . turn-off-auto-fill)
      :bind (("C-x m" . sb/notmuch)
	     ("M-]" . notmuch-cycle-notmuch-buffers))
      :custom
      (notmuch-hello-thousands-separator ",")
      (notmuch-mua-cite-function (quote message-cite-original-without-signature))
      (notmuch-fcc-dirs "sent +sent -unread -inbox")
      (notmuch-saved-searches
       (quote
	((:name "Inbox" :query "tag:inbox" :key "i")
	 (:name "Flagged" :query "tag:flagged" :key "f")
	 (:name "Drafts" :query "tag:draft" :key "d")
	 (:name "New in Threads" :query "thread:\"{from:stig}\" and tag:new and not tag:sent" :key "t" :sort-order newest-first :search-type tree)
	 (:name "All in Threads" :query "thread:\"{from:stig}\"" :key "T" :sort-order newest-first :search-type tree :count-query "tag:no-match")
	 (:name "List Messages" :query "tag:lists and tag:new and not tag:sent" :key "l" :search-type tree)
	 (:name "Recent-ish" :query "date:-4d..today and not tag:lists" :key "r" :count-query "tag:no-match" :sort-order newest-first))))
      (notmuch-tagging-keys
       (quote
	(("a" notmuch-archive-tags "Archive")
	 ("u" notmuch-show-mark-read-tags "Mark read")
	 ("f"
	  ("+flagged")
	  "Flag")
	 ("s"
	  ("+spam" "-inbox")
	  "Mark as spam")
	 ("d"
	  ("+deleted" "-inbox")
	  "Delete")
	 ("m"
	  ("+muted")
	  "Mute Thread"))))

      :config
      (defun sb/notmuch (arg)
	"Launch notmuch. If ran with prefix arg, launch mbsync in the
    background, and automatically refresh the current buffer when
    done. With two prefix args, launch mbsync with `--all` rather
    than just for inboxes."
	(interactive "p")
	(notmuch)
	(if (> arg 1)
	    (set-process-sentinel
	     (sb/mbsync (if (eq 4 arg) "inbox" "--all"))
	     (lambda (proc state)
	       (message nil) ;; clear minibuffer
	       (notmuch-poll-and-refresh-this-buffer))))))
  #+END_SRC

* Configuring NotMuch before first use

  After installing NotMuch I ran =notmuch setup= to create an initial
  configuration.  After that you can set config values
  independently.  That is my preference now, as I can do everything
  from this file.

  #+begin_src sh :results silent
    notmuch config set database.path ~/Mail
    notmuch config set user.name "Stig Brautaset"
    notmuch config set user.primary_email "stig@brautaset.org"
    notmuch config set new.tags 'new;unread;inbox'
    notmuch config set new.ignore '.mbsyncstate;.mbsyncstate.journal;.mbsyncstate.lock;.mbsyncstate.new;.uidvalidity;.isyncuidmap.db'
    notmuch config set search.exclude_tags 'deleted;spam;muted'
  #+end_src

* Write =pre-new= and =post-new= hook scripts

  Remove the =new= tag from any messages just before refreshing.  Do
  this in a =pre-hook= so we can use the new =new= tag to optimise
  further tagging in the =post-hook= below.

  #+BEGIN_SRC sh :tangle "~/Mail/.notmuch/hooks/pre-new" :shebang #!/bin/zsh :tangle-mode (identity #o755) :mkdirp t
    notmuch tag -new -- tag:new
    notmuch search --output files tag:draft and tag:deleted | xargs rm
  #+END_SRC

  Notmuch assigns the =new= tag when it first sees a message, so we
  can use it to limit the search space for further tagging.

  #+BEGIN_SRC sh :tangle "~/Mail/.notmuch/hooks/post-new" :shebang #!/bin/zsh :tangle-mode (identity #o755) :mkdirp t
    notmuch tag --batch <<EOF
    # Mute new messages to muted threads
    +muted -- thread:{tag:muted} and tag:new

    # Tag previously unseen messages
    +sent -- path:/sent/ and tag:new
    -inbox -- path:/Archive/ and tag:new

    # Add specific tags for mailing lists, and remove from inbox
    +lists +org-mode -inbox -- path:/org-mode/ and tag:new
    +lists +lilypond -inbox -- path:/lilypond/ and tag:new
    +lists +clojure -inbox -- path:/clojure/ and tag:new

    # V. low volume lists gets to stay in inbox
    +lists +tuls -- path:/tuls/ and tag:new

    +lobsters -- tag:new and from:lobste.rs
    EOF
  #+END_SRC

* Configure mbsync to download email

  I use =mbsync= (from the isync suite) to sync mail from my IMAP
  server to my local machine.

  #+BEGIN_SRC conf :tangle "~/.mbsyncrc"
    IMAPAccount gandi
    Host mail.gandi.net
    User stig@brautaset.org
    SSLType IMAPS
    AuthMechs LOGIN
    PassCmd "security find-generic-password -s mbsync-gandi-password -w"
    # To rotate:
    # > security delete-generic-password -s mbsync-gandi-password
    # > security add-generic-password -a stig@brautaset.org -s mbsync-gandi-password -w APP-SPECIFIC-PASSWORD

    IMAPStore remote
    Account gandi

    MaildirStore local
    Path ~/Mail/
    Inbox ~/Mail/INBOX
    Trash trash

    Channel inbox
    Master :remote:
    Slave :local:
    Create Slave
    SyncState *

    Channel sent
    Master :remote:Sent
    Slave :local:sent
    Create Slave
    SyncState *

    Channel org-mode
    Master :remote:org-mode
    Slave :local:org-mode
    Create Slave
    SyncState *
    MaxMessages 500
    ExpireUnread yes
    Expunge Both

    # Channel lilypond
    # Master :remote:lilypond
    # Slave :local:lilypond
    # Create Slave
    # SyncState *
    # MaxMessages 500
    # ExpireUnread yes
    # Expunge Both

    Channel clojure
    Master :remote:clojure
    Slave :local:clojure
    Create Slave
    SyncState *
    MaxMessages 500
    ExpireUnread yes
    Expunge Both

    # Channel tuls
    # Master :remote:tuls
    # Slave :local:tuls
    # Create Slave
    # SyncState *
    # MaxMessages 500
    # Expunge Both

    Channel archive
    Master :remote:Archive
    Slave :local:archive
    Create Slave
    SyncState *
  #+END_SRC

  I don't like to leave Emacs.  Thus I create a function to call
  mbsync as an async shell process.  I run /this/ from the function I
  use to launch Notmuch.

  #+BEGIN_SRC emacs-lisp
    (defun sb/mbsync (&rest group)
      (interactive)
      (let ((group (or (and (car group) group) '("--all")))
	    (command `("mbsync" "--verbose" "--quiet" ,@group)))
	(message "Starting %s.." (mapconcat 'identity command " "))
	(apply 'start-process "mbsync" "*mbsync*" command)))
  #+END_SRC

* Sending mail with MSMTP

  MSMTP's configuration is really simple, and it will detect the
  account to use from the "from" address.  Passwords are stored in
  the system Keychain.  See the [[http://msmtp.sourceforge.net/doc/msmtp.html#Authentication][Authentication]] section in the msmtp
  documentation for details.

  : security add-internet-password -s mail.gandi.net -r smtp -a stig@brautaset.org -w

  #+BEGIN_SRC conf :tangle "~/.msmtprc"
    defaults
    port 587
    tls on
    tls_trust_file /etc/ssl/cert.pem
    auth on

    account private
    from stig@brautaset.org
    host mail.gandi.net
    user stig@brautaset.org
  #+END_SRC

  Finally we have to tell Emacs to use msmtp to send mail.  (And to
  kill the message buffer on exit.)

  #+BEGIN_SRC emacs-lisp
    (setq message-send-mail-function 'message-send-mail-with-sendmail
	  sendmail-program "msmtp"
	  message-sendmail-envelope-from 'header
	  mail-envelope-from 'header
	  mail-specify-envelope-from t)

    (setq message-kill-buffer-on-exit t)
  #+END_SRC

* Compose Emails with Org mode

  Very occasionally I want to create HTML mail. (For tables, for
  example.) I then write my message using Org mode syntax and use
  org-mime-htmlize.

  #+BEGIN_SRC emacs-lisp (when sb/personal-setup-p "~/.emacs.d/init.el")
    (use-package org-mime
      :bind (:map message-mode-map
		  ("C-c h" . org-mime-htmlize))
      :custom
      (org-mime-preserve-breaks nil))
  #+END_SRC

* Linking to Notmuch from Org

  I don't like using my email inbox as a todo list.  When I receive
  an email I need to act on but /can't yet/ for some reason, I link to
  it from my Org mode agenda and archive it.  When Org agenda prompts
  me I can click on the link and immediately get to the mail in my
  archive, and can reply to it from there.

  #+begin_src emacs-lisp
    (use-package ol-notmuch
      :ensure org-plus-contrib
      :after (org notmuch))
  #+end_src
