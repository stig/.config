#+title: Blogging Support
#+Author: Stig Brautaset
#+PROPERTY: header-args:              :mkdirp yes
#+PROPERTY: header-args:emacs-lisp    :tangle ~/.config/emacs/blogging.el :results silent
#+STARTUP: content

This file contains config I use for working on my blog. I create blog
entries in a directory under =~/blog= and link to them from the main
index page. It has so far been a manual job, but I have finally
managed to create a function to automate it a bit.

* Helper function to get a value from Org keyword element

#+begin_src emacs-lisp
(defun sb/org-kw-get (key)
  "Return a lambda that takes an Org keyword element and returns
its :value property if its :key property matches `key'."
  `(lambda (kw)
     (if (equal ,key (org-element-property :key kw))
         (org-element-property :value kw))))
#+end_src

* Create blog post index entry

#+BEGIN_SRC emacs-lisp
(defun sb/blog-post-index-entry ()
  "Call in a blog post to get an entry suitable for linking to this
post from the index page."
  (interactive)
  (let* ((path (s-chop-prefix (expand-file-name "~/blog/") (buffer-file-name)))
         (tree (org-element-parse-buffer))
         (title (org-element-map tree 'keyword (sb/org-kw-get "TITLE") nil t))
         (categories (org-element-map tree 'keyword (sb/org-kw-get "CATEGORY"))))
    (with-temp-buffer
      (org-mode)
      (org-insert-heading)
      ;; Would have loved to use `org-insert-link' here but
      ;; I can't stop it from presenting a prompt.
      (insert "[[file:" path "][" title "]]\n"
              "#+include: " path "::begin_abstract :only-contents t")
      ;; Need to go back to the first line to set tags, as
      ;; org-set-tags assumes point is on a headline.
      (goto-char (point-min))
      (org-set-tags categories)
      ;; Return the contents temporary buffer as a string *without properties*
      (copy-region-as-kill
       (point-min) (point-max)))))
#+END_SRC

* Create RSS entry

Creating an entry in the RSS feed is another manual step. This way I
can "soft publish" and publish to RSS separately from the index page.

#+begin_src emacs-lisp
(defun sb/blog-post-rss-entry ()
  "Call in a blog post to get an entry suitable for linking to this
post from the index page."
  (interactive)
  (let* ((path (s-chop-prefix (expand-file-name "~/blog/") (buffer-file-name)))
         (tree (org-element-parse-buffer))
         (title (org-element-map tree 'keyword (sb/org-kw-get "TITLE") nil t))
         (categories (org-element-map tree 'keyword (sb/org-kw-get "CATEGORY"))))
    (with-temp-buffer
      (org-mode)
      (org-insert-heading)
      (insert title "\n"
	      "#+include: " path)
      (org-set-property "RSS_PERMALINK"
                        (format "%s.html"
                                (file-name-sans-extension path)))
      (copy-region-as-kill
       (point-min) (point-max)))))
#+end_src

=org-rss= requires these to do its thing:

#+begin_src emacs-lisp
(require 'ox-icalendar)
(require 'ox-rss)
#+end_src

* Find drafts

#+begin_src emacs-lisp
(defun sb/find-drafts ()
  "Find org files in `~/blog/articles' not already linked from
              `~/blog/index.org'."
  (interactive)
  (let* ((prefix (expand-file-name "~/blog/"))
         (posts
          (directory-files-recursively
           (concat prefix "articles") ".org"))
         (index-contents (get-string-from-file (concat prefix "index.org")))
         (drafts (cl-remove-if (lambda (needle)
                                 (string-match
                                  (string-remove-prefix prefix needle)
                                  index-contents))
                               posts))
         (buffer-name "*blog drafts*"))
    (if drafts
        (progn
          (with-current-buffer (get-buffer-create buffer-name)
            (erase-buffer)
            (org-mode)
            (insert
             (mapconcat
              (lambda (entry)
                (format "- file:%s" entry))
              drafts
              "\n"))
            (buffer-string))
          (unless (get-buffer-window buffer-name t)
            (pop-to-buffer buffer-name nil t))
          (shrink-window-if-larger-than-buffer
           (get-buffer-window buffer-name)))
      (message "No drafts could be found!"))))
#+end_src

* Blog server

While noodling around with my blog locally I publish to =~/public_html=
and use a simple Python server to host it.

#+begin_src emacs-lisp
(defun sb/blog-server ()
  (interactive)
  (start-process "Blog Server" "*blog server*"
                 "python3"
                 "-m" "http.server"
                 "--directory" (expand-file-name "~/public_html/"))
  (message "Blog Server started"))
#+end_src

* Load Blog Publish Configuration

This needs clearing up.

#+begin_src emacs-lisp
(setq blog/copyright "<p>Copyright &copy; 2001-2020 Stig Brautaset</p>")

(setq blog/org-html-preamble "
<nav>
  <ul>
    <li><a accesskey=\"H\" href=\"index.html\">Home</a></li>
    <li><a accesskey=\"p\" href=\"publications.html\">Publications</a></li>
    <li><a accesskey=\"A\" href=\"about.html\">About</a></li>
  </ul>
</nav>
")

(setq blog/org-html-postamble (concat "
<nav>
  <ul>
    <li><a accesskey=\"H\" href=\"../../index.html\">Home</a></li>
    <li><a accesskey=\"A\" href=\"../../about.html\">About</a></li>
  </ul>
</nav>
" blog/copyright))

(setq common-properties
      '(:author "Stig Brautaset"
		:email "stig@brautaset.org"

		:section-numbers nil
		:time-stamp-file nil
		:with-drawers t
		:with-toc nil

		;; Don't use inline CSS for source code
		:with-html-htmlize-output-type "css"
		:with-html-preamble blog/org-html-preamble
		:with-html-postamble blog/org-html-postamble
		:with-html-fromta-drawer-function (lambda (name content)
						    (format "<div class=\"drawer %s\"><h6>%s</h6>%s</div>"
							    (downcase name)
							    (capitalize name)
							    content))
		:with-html-footnotes-section "<div id=\"footnotes\"><hr/><!--%s-->%s</div>"

		:html-doctype "html5"
		:html-head-include-default-style nil
		:html-head-include-scripts nil
		:html-html5-fancy t
		:html-metadata-timestamp-format "%e %B %Y"))

(setq org-publish-project-alist
      `(("www"
	 :components ("www-pages" "www-articles" "www-static" "www-rss"))

	("www-static"
	 ,@common-properties
	 :base-directory "~/blog"
	 :base-extension "css\\|jpg\\|jpeg\\|png\\|pdf\\|html\\|xml"
	 :recursive t
	 :publishing-directory "~/public_html"
	 :publishing-function org-publish-attachment)

	("www-pages"
	 ,@common-properties
	 :base-directory "~/blog"
	 :exclude ".*"
	 :html-postamble (lambda (ignored) blog/copyright) ;; no bottom nav for pages
	 :include ("index.org" "publications.org" "articles.org" "about.org")
	 :publishing-directory "~/public_html"
	 :publishing-function org-html-publish-to-html)

	("www-articles"
	 ,@common-properties
	 :base-directory "~/blog/articles"
	 :html-preamble nil ;; no preamble (top nav!) for articles
	 :publishing-directory "~/public_html/articles"
	 :publishing-function org-html-publish-to-html
	 :recursive t)

	("www-rss"
	 ,@common-properties
	 :base-directory "~/blog"
	 :exclude ".*"
	 :html-link-home "https://www.brautaset.org"
	 :html-link-use-abs-url t
	 :include ("feed.org")
	 :publishing-directory "~/public_html"
	 :publishing-function (org-rss-publish-to-rss)
	 :rss-image-url "https://www.brautaset.org/etc/icon.png"
	 :rss-extension "xml")))
#+end_src

* Syntax highlighting for languages I use on my blog

#+begin_src emacs-lisp
(use-package htmlize)
(use-package clojure-mode)
(use-package clojure-mode-extra-font-locking)
(use-package scala-mode)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (ditaa . t)
   (shell . t)))
#+end_src

* Turn off annoying ~python-indent-offset~ during publication
Turn off a harmless (but annoying) warning during publication:

: Can't guess python-indent-offset, using defaults 4

#+begin_src emacs-lisp
(setq python-indent-guess-indent-offset-verbose nil)
#+end_src
